{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
		"name": "LI Council API",
		"description": "Complete API collection for LI Council mobile and admin endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Mobile Endpoints",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    ",
											"    if (responseJson.data && responseJson.data.token) {",
											"        pm.environment.set(\"auth_token\", responseJson.data.token);",
											"        pm.environment.set(\"promoter_id\", responseJson.data.promoter.id);",
											"        console.log(\"Auth token saved:\", responseJson.data.token);",
											"    }",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.data).to.have.property('promoter');",
											"    pm.expect(responseJson.data).to.have.property('token');",
											"    pm.expect(responseJson.data).to.have.property('token_type');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"promoter1\",\n    \"password\": \"password123\"\n}"
								},
								"url": {
									"raw": "{{mobile_base_url}}/auth/login",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							}
						},
						{
							"name": "Get Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Profile retrieved successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    pm.expect(responseJson.data).to.have.property('id');",
											"    pm.expect(responseJson.data).to.have.property('name');",
											"    pm.expect(responseJson.data).to.have.property('username');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mobile_base_url}}/auth/profile",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"auth",
										"profile"
									]
								}
							}
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    ",
											"    // Clear stored tokens",
											"    pm.environment.unset(\"auth_token\");",
											"    pm.environment.unset(\"promoter_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{mobile_base_url}}/auth/logout",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							}
						}
					]
				},
				{
					"name": "Activities",
					"item": [
						{
							"name": "List Activities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Activities listed successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    pm.expect(responseJson.data).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Pagination data present\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('current_page');",
											"    pm.expect(responseJson).to.have.property('last_page');",
											"    pm.expect(responseJson).to.have.property('total');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mobile_base_url}}/activities?page=1&per_page=10",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"activities"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										}
									]
								}
							}
						},
						{
							"name": "Create Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Activity created successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    pm.expect(responseJson.data).to.have.property('id');",
											"    ",
											"    // Save activity ID for subsequent tests",
											"    pm.environment.set(\"last_activity_id\", responseJson.data.id);",
											"});",
											"",
											"pm.test(\"Activity has required fields\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.data).to.have.property('visit_date');",
											"    pm.expect(responseJson.data).to.have.property('activity_type');",
											"    pm.expect(responseJson.data).to.have.property('location');",
											"    pm.expect(responseJson.data).to.have.property('status');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"visit_date\": \"2024-01-15\",\n    \"activity_type\": \"recce\",\n    \"product_type\": \"Grey\",\n    \"state\": \"Karnataka\",\n    \"district\": \"Bangalore Urban\",\n    \"sub_district\": \"Bangalore North\",\n    \"village\": \"Hebbal\",\n    \"village_code\": \"KA001\",\n    \"location\": \"Near Hebbal Lake\",\n    \"landmark\": \"Opposite Metro Station\",\n    \"latitude\": 13.0358,\n    \"longitude\": 77.5970,\n    \"remarks\": \"Good location for survey\"\n}"
								},
								"url": {
									"raw": "{{mobile_base_url}}/activities",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"activities"
									]
								}
							}
						},
						{
							"name": "Get Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Activity retrieved successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    pm.expect(responseJson.data).to.have.property('id');",
											"});",
											"",
											"pm.test(\"Activity includes promoter data\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.data).to.have.property('promoter');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mobile_base_url}}/activities/{{last_activity_id}}",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"activities",
										"{{last_activity_id}}"
									]
								}
							}
						},
						{
							"name": "Update Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Activity updated successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    pm.expect(responseJson.data).to.have.property('id');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"remarks\": \"Updated remarks for this activity\",\n    \"status\": \"completed\"\n}"
								},
								"url": {
									"raw": "{{mobile_base_url}}/activities/{{last_activity_id}}",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"activities",
										"{{last_activity_id}}"
									]
								}
							}
						},
						{
							"name": "Delete Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Activity deleted successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{mobile_base_url}}/activities/{{last_activity_id}}",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"activities",
										"{{last_activity_id}}"
									]
								}
							}
						}
					]
				},
				{
					"name": "Route Plans",
					"item": [
						{
							"name": "List Route Plans",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Route plans listed successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    pm.expect(responseJson.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mobile_base_url}}/route-plans",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"route-plans"
									]
								}
							}
						},
						{
							"name": "Get Route Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Route plan retrieved successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    pm.expect(responseJson.data).to.have.property('id');",
											"    pm.expect(responseJson.data).to.have.property('plan_name');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mobile_base_url}}/route-plans/1",
									"host": [
										"{{mobile_base_url}}"
									],
									"path": [
										"route-plans",
										"1"
									]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "Admin Endpoints",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Admin Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Admin login successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    ",
											"    if (responseJson.data && responseJson.data.token) {",
											"        pm.environment.set(\"admin_token\", responseJson.data.token);",
											"        pm.environment.set(\"admin_id\", responseJson.data.user.id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"password123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							}
						},
						{
							"name": "Admin Profile",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/auth/profile",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"profile"
									]
								}
							}
						},
						{
							"name": "Admin Logout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/auth/logout",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							}
						}
					]
				},
				{
					"name": "Promoter Management",
					"item": [
						{
							"name": "List Promoters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/promoters",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"promoters"
									]
								}
							}
						},
						{
							"name": "Create Promoter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Promoter created successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.true;",
											"    pm.expect(responseJson.data).to.have.property('id');",
											"    ",
											"    pm.environment.set(\"last_promoter_id\", responseJson.data.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"John Doe\",\n    \"username\": \"johndoe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"password123\",\n    \"phone\": \"+91-9876543210\",\n    \"state\": \"Karnataka\",\n    \"district\": \"Bangalore Urban\",\n    \"sub_district\": \"Bangalore North\",\n    \"village\": \"Hebbal\",\n    \"is_active\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/promoters",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"promoters"
									]
								}
							}
						},
						{
							"name": "Get Promoter",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/promoters/{{last_promoter_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"promoters",
										"{{last_promoter_id}}"
									]
								}
							}
						},
						{
							"name": "Update Promoter",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"John Doe Updated\",\n    \"phone\": \"+91-9876543211\",\n    \"is_active\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/promoters/{{last_promoter_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"promoters",
										"{{last_promoter_id}}"
									]
								}
							}
						},
						{
							"name": "Delete Promoter",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/promoters/{{last_promoter_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"promoters",
										"{{last_promoter_id}}"
									]
								}
							}
						}
					]
				},
				{
					"name": "Route Plans",
					"item": [
						{
							"name": "List Route Plans",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/route-plans",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"route-plans"
									]
								}
							}
						},
						{
							"name": "Create Route Plan",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"plan_name\": \"Test Route Plan\",\n    \"state\": \"Karnataka\",\n    \"district\": \"Bangalore Urban\",\n    \"sub_district\": \"Bangalore North\",\n    \"village\": \"Hebbal\",\n    \"village_code\": \"KA001\",\n    \"location\": \"Hebbal Lake Area\",\n    \"landmark\": \"Near Metro Station\",\n    \"latitude\": 13.0358,\n    \"longitude\": 77.5970,\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/route-plans",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"route-plans"
									]
								}
							}
						},
						{
							"name": "Import Route Plans",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "csv_file",
											"type": "file",
											"src": "/path/to/route_plans.csv"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/route-plans/import",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"route-plans",
										"import"
									]
								}
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-add auth token to requests",
					"const token = pm.environment.get(\"auth_token\");",
					"const adminToken = pm.environment.get(\"admin_token\");",
					"",
					"// Determine which token to use based on the URL",
					"const url = pm.request.url.toString();",
					"if (url.includes('/mobile/') && token && !url.includes('/login')) {",
					"    pm.request.headers.add({",
					"        key: 'Authorization',",
					"        value: 'Bearer ' + token",
					"    });",
					"} else if (!url.includes('/mobile/') && adminToken && !url.includes('/login')) {",
					"    pm.request.headers.add({",
					"        key: 'Authorization',",
					"        value: 'Bearer ' + adminToken",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global response validation",
					"pm.test(\"Response time is less than 5 seconds\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Response has proper structure\", function () {",
					"    const responseJson = pm.response.json();",
					"    pm.expect(responseJson).to.have.property('success');",
					"    ",
					"    if (responseJson.success) {",
					"        // Successful responses should have data or message",
					"        pm.expect(responseJson).to.satisfy(response => {",
					"            return response.hasOwnProperty('data') || response.hasOwnProperty('message');",
					"        });",
					"    } else {",
					"        // Error responses should have a message",
					"        pm.expect(responseJson).to.have.property('message');",
					"    }",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://vair.test/api",
			"type": "string"
		},
		{
			"key": "mobile_base_url",
			"value": "https://vair.test/api/mobile",
			"type": "string"
		}
	]
}
